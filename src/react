import { __DEV__, REACT_ELEMENT_TYPE } from "./react-flags";

const ReactCurrentOwner = {
  current: null,
};

function ReactElement(type, key, ref, owner, props) {
  const element = {
    $$typeof: REACT_ELEMENT_TYPE,

    type,
    key,
    ref,
    props,

    _owner: owner,
  };

  if (__DEV__) {
    if (Object.freeze) {
      Object.freeze(props);
      Object.freeze(element);
    }
  }

  return element;
}

// createElement(type , config , children , children , ...)
function createElement(type, config, children) {
  const props = {};
  let key = null;
  let ref = null;

  if (config !== null) {
    if (config.ref !== undefined) {
      ref = config.ref;
    }

    if (config.key !== undefined) {
      key = config.key;
    }
  }

  const childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    const childArray = Array(childrenLength);
    for (let i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // todo : resolve default props

  return ReactElement(type, key, ref, ReactCurrentOwner.current, props);
}

export { createElement };
